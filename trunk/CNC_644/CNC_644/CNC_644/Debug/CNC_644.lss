
CNC_644.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000204  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008b  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000189  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000110  00000000  00000000  00000ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e0  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fb  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000030  00000000  00000000  00001007  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_20>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b1 07       	cpc	r27, r17
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:

#include <avr/io.h>
#include "UART.h"

int main(void)
{
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
  ac:	0e 94 59 00 	call	0xb2	; 0xb2 <USART_Init>
    while(1)
    {
        //TODO:: Please write your application code 
    }
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0xc>

000000b2 <USART_Init>:
 #include "UART.h"
 #include <avr/io.h>
 #include <avr/interrupt.h>
 
void USART_Init ()
{
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	//Set baud rate
	UBRR0H = (unsigned char)(UBBR>>8);
  ba:	85 ec       	ldi	r24, 0xC5	; 197
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)UBBR;
  c2:	84 ec       	ldi	r24, 0xC4	; 196
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  cc:	81 ec       	ldi	r24, 0xC1	; 193
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	28 e1       	ldi	r18, 0x18	; 24
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	
	UCSR0C = 0x06; //set asynchronous, no parity, one stop bit, 8 bit transfer.
  d6:	82 ec       	ldi	r24, 0xC2	; 194
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	26 e0       	ldi	r18, 0x06	; 6
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	UCSR0B |= (1 << RXCIE0); //set RX interrupt on
  e0:	81 ec       	ldi	r24, 0xC1	; 193
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	21 ec       	ldi	r18, 0xC1	; 193
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	20 68       	ori	r18, 0x80	; 128
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	
}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	0f 92       	push	r0
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 104:	00 00       	nop
 106:	80 ec       	ldi	r24, 0xC0	; 192
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	80 81       	ld	r24, Z
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	80 72       	andi	r24, 0x20	; 32
 114:	90 70       	andi	r25, 0x00	; 0
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	b1 f3       	breq	.-20     	; 0x106 <USART_Transmit+0xe>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 11a:	86 ec       	ldi	r24, 0xC6	; 198
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
}
 124:	0f 90       	pop	r0
 126:	cf 91       	pop	r28
 128:	df 91       	pop	r29
 12a:	08 95       	ret

0000012c <USART_Receive>:
unsigned char USART_Receive( void )
{
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 134:	00 00       	nop
 136:	80 ec       	ldi	r24, 0xC0	; 192
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	d4 f7       	brge	.-12     	; 0x136 <USART_Receive+0xa>
		;
	/* Get and return received data from buffer */
	return UDR0;
 142:	86 ec       	ldi	r24, 0xC6	; 198
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
}
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	08 95       	ret

00000150 <__vector_20>:
ISR(USART0_RX_vect) //trigger interrupt when uart1 receives data   USART0_RX_vect
{ 
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
// Code to be executed when the USART receives a byte here
	Received = UDR0; // Fetch the received byte value into the variable "ByteReceived" 
 16a:	86 ec       	ldi	r24, 0xC6	; 198
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	80 81       	ld	r24, Z
 172:	80 93 00 01 	sts	0x0100, r24
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
