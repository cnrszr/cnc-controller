
AVRStepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d6  00800100  0000133c  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000133c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  008003d6  008003d6  000016a6  2**0
                  ALLOC
  3 .stab         000008b8  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000144  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024b  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009ef  00000000  00000000  0000236f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000481  00000000  00000000  00002d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ca1  00000000  00000000  000031df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00003e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000380  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000000be  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_22>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	13 e0       	ldi	r17, 0x03	; 3
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec e3       	ldi	r30, 0x3C	; 60
      90:	f3 e1       	ldi	r31, 0x13	; 19
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 3d       	cpi	r26, 0xD6	; 214
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	14 e0       	ldi	r17, 0x04	; 4
      a0:	a6 ed       	ldi	r26, 0xD6	; 214
      a2:	b3 e0       	ldi	r27, 0x03	; 3
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 35       	cpi	r26, 0x50	; 80
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
      b2:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <Init>:
/*! \brief Init of peripheral devices.
 *
 *  Setup IO, uart, stepper, timer and interrupt.
 */
void Init(void)
{
      ba:	df 93       	push	r29
      bc:	cf 93       	push	r28
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
  // Init of IO pins
  sm_driver_Init_IO();
      c2:	0e 94 4f 02 	call	0x49e	; 0x49e <sm_driver_Init_IO>
  // Init of uart
  USART_Init(MYUBBR);
      c6:	8c e0       	ldi	r24, 0x0C	; 12
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 1b 07 	call	0xe36	; 0xe36 <USART_Init>

  // Set stepper motor driver output
  sm_driver_StepOutput(0);
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 a1 02 	call	0x542	; 0x542 <sm_driver_StepOutput>

  // Init of Timer/Counter1
  speed_cntr_Init_Timer1();
      d4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <speed_cntr_Init_Timer1>

  sei();
      d8:	78 94       	sei
}
      da:	cf 91       	pop	r28
      dc:	df 91       	pop	r29
      de:	08 95       	ret

000000e0 <main>:
/*! \brief Demo of linear speed controller.
 *
 *  Serial interface frontend to test linear speed controller.
 */
void main(void)
{
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	2b 97       	sbiw	r28, 0x0b	; 11
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
  // Number of steps to move.
  int steps = 1000;
      f8:	88 ee       	ldi	r24, 0xE8	; 232
      fa:	93 e0       	ldi	r25, 0x03	; 3
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	89 83       	std	Y+1, r24	; 0x01
  // Accelration to use.
  int acceleration = 100;
     100:	84 e6       	ldi	r24, 0x64	; 100
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	9c 83       	std	Y+4, r25	; 0x04
     106:	8b 83       	std	Y+3, r24	; 0x03
  // Deceleration to use.
  int deceleration = 100;
     108:	84 e6       	ldi	r24, 0x64	; 100
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	9e 83       	std	Y+6, r25	; 0x06
     10e:	8d 83       	std	Y+5, r24	; 0x05
  // Speed to use.
  int speed = 800;
     110:	80 e2       	ldi	r24, 0x20	; 32
     112:	93 e0       	ldi	r25, 0x03	; 3
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	8f 83       	std	Y+7, r24	; 0x07
  // Tells if the received string was a valid command.
  char okCmd = FALSE;
     118:	19 86       	std	Y+9, r1	; 0x09

  Init();
     11a:	0e 94 5d 00 	call	0xba	; 0xba <Init>

  // Outputs help screen.
  uart_SendString("\n\r");
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
  ShowHelp();
     126:	0e 94 df 01 	call	0x3be	; 0x3be <ShowHelp>
  ShowData(stepPosition, acceleration, deceleration, speed, steps);
     12a:	80 91 d7 03 	lds	r24, 0x03D7
     12e:	90 91 d8 03 	lds	r25, 0x03D8
     132:	6b 81       	ldd	r22, Y+3	; 0x03
     134:	7c 81       	ldd	r23, Y+4	; 0x04
     136:	4d 81       	ldd	r20, Y+5	; 0x05
     138:	5e 81       	ldd	r21, Y+6	; 0x06
     13a:	2f 81       	ldd	r18, Y+7	; 0x07
     13c:	38 85       	ldd	r19, Y+8	; 0x08
     13e:	e9 81       	ldd	r30, Y+1	; 0x01
     140:	fa 81       	ldd	r31, Y+2	; 0x02
     142:	8f 01       	movw	r16, r30
     144:	0e 94 02 02 	call	0x404	; 0x404 <ShowData>
     148:	01 c0       	rjmp	.+2      	; 0x14c <main+0x6c>
        uart_SendString("OK\n\r");
      }

      ShowData(stepPosition, acceleration, deceleration, speed, steps);
    }//end if(cmd)
  }//end while(1)
     14a:	00 00       	nop
  ShowHelp();
  ShowData(stepPosition, acceleration, deceleration, speed, steps);

  while(1) 
  {
		if(status.cmd == TRUE){
     14c:	80 91 d6 03 	lds	r24, 0x03D6
     150:	82 70       	andi	r24, 0x02	; 2
     152:	88 23       	and	r24, r24
     154:	d1 f3       	breq	.-12     	; 0x14a <main+0x6a>
      if(UART_RxBuffer[0] == 'm'){
     156:	80 91 30 04 	lds	r24, 0x0430
     15a:	8d 36       	cpi	r24, 0x6D	; 109
     15c:	09 f0       	breq	.+2      	; 0x160 <main+0x80>
     15e:	b3 c0       	rjmp	.+358    	; 0x2c6 <main+0x1e6>
        // Move with...
        if(UART_RxBuffer[1] == ' '){
     160:	80 91 31 04 	lds	r24, 0x0431
     164:	80 32       	cpi	r24, 0x20	; 32
     166:	b9 f4       	brne	.+46     	; 0x196 <main+0xb6>
          // ...number of steps given.
          steps = atoi((char const *)UART_RxBuffer+2);
     168:	82 e3       	ldi	r24, 0x32	; 50
     16a:	94 e0       	ldi	r25, 0x04	; 4
     16c:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     170:	9a 83       	std	Y+2, r25	; 0x02
     172:	89 83       	std	Y+1, r24	; 0x01
          speed_cntr_Move(steps, acceleration, deceleration, speed);
     174:	6b 81       	ldd	r22, Y+3	; 0x03
     176:	7c 81       	ldd	r23, Y+4	; 0x04
     178:	4d 81       	ldd	r20, Y+5	; 0x05
     17a:	5e 81       	ldd	r21, Y+6	; 0x06
     17c:	2f 81       	ldd	r18, Y+7	; 0x07
     17e:	38 85       	ldd	r19, Y+8	; 0x08
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	9a 81       	ldd	r25, Y+2	; 0x02
     184:	0e 94 db 02 	call	0x5b6	; 0x5b6 <speed_cntr_Move>
          okCmd = TRUE;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	89 87       	std	Y+9, r24	; 0x09
          uart_SendString("\n\r  ");
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
     194:	e5 c0       	rjmp	.+458    	; 0x360 <main+0x280>
        }
        else if(UART_RxBuffer[1] == 'o'){
     196:	80 91 31 04 	lds	r24, 0x0431
     19a:	8f 36       	cpi	r24, 0x6F	; 111
     19c:	09 f0       	breq	.+2      	; 0x1a0 <main+0xc0>
     19e:	e0 c0       	rjmp	.+448    	; 0x360 <main+0x280>
          if(UART_RxBuffer[2] == 'v'){
     1a0:	80 91 32 04 	lds	r24, 0x0432
     1a4:	86 37       	cpi	r24, 0x76	; 118
     1a6:	09 f0       	breq	.+2      	; 0x1aa <main+0xca>
     1a8:	db c0       	rjmp	.+438    	; 0x360 <main+0x280>
            if(UART_RxBuffer[3] == 'e'){
     1aa:	80 91 33 04 	lds	r24, 0x0433
     1ae:	85 36       	cpi	r24, 0x65	; 101
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <main+0xd4>
     1b2:	d6 c0       	rjmp	.+428    	; 0x360 <main+0x280>
              // ...all parameters given
              if(UART_RxBuffer[4] == ' '){
     1b4:	80 91 34 04 	lds	r24, 0x0434
     1b8:	80 32       	cpi	r24, 0x20	; 32
     1ba:	09 f0       	breq	.+2      	; 0x1be <main+0xde>
     1bc:	d1 c0       	rjmp	.+418    	; 0x360 <main+0x280>
                int i = 6;
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	9b 87       	std	Y+11, r25	; 0x0b
     1c4:	8a 87       	std	Y+10, r24	; 0x0a
                steps = atoi((char const *)UART_RxBuffer+5);
     1c6:	85 e3       	ldi	r24, 0x35	; 53
     1c8:	94 e0       	ldi	r25, 0x04	; 4
     1ca:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     1ce:	9a 83       	std	Y+2, r25	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
                while((UART_RxBuffer[i] != ' ') && (UART_RxBuffer[i] != 13)) i++;
     1d2:	05 c0       	rjmp	.+10     	; 0x1de <main+0xfe>
     1d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	9b 87       	std	Y+11, r25	; 0x0b
     1dc:	8a 87       	std	Y+10, r24	; 0x0a
     1de:	8a 85       	ldd	r24, Y+10	; 0x0a
     1e0:	9b 85       	ldd	r25, Y+11	; 0x0b
     1e2:	80 5d       	subi	r24, 0xD0	; 208
     1e4:	9b 4f       	sbci	r25, 0xFB	; 251
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	80 32       	cpi	r24, 0x20	; 32
     1ec:	41 f0       	breq	.+16     	; 0x1fe <main+0x11e>
     1ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     1f0:	9b 85       	ldd	r25, Y+11	; 0x0b
     1f2:	80 5d       	subi	r24, 0xD0	; 208
     1f4:	9b 4f       	sbci	r25, 0xFB	; 251
     1f6:	fc 01       	movw	r30, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	8d 30       	cpi	r24, 0x0D	; 13
     1fc:	59 f7       	brne	.-42     	; 0x1d4 <main+0xf4>
                i++;
     1fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     200:	9b 85       	ldd	r25, Y+11	; 0x0b
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	9b 87       	std	Y+11, r25	; 0x0b
     206:	8a 87       	std	Y+10, r24	; 0x0a
                acceleration = atoi((char const *)UART_RxBuffer+i);
     208:	8a 85       	ldd	r24, Y+10	; 0x0a
     20a:	9b 85       	ldd	r25, Y+11	; 0x0b
     20c:	80 5d       	subi	r24, 0xD0	; 208
     20e:	9b 4f       	sbci	r25, 0xFB	; 251
     210:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     214:	9c 83       	std	Y+4, r25	; 0x04
     216:	8b 83       	std	Y+3, r24	; 0x03
                while((UART_RxBuffer[i] != ' ') && (UART_RxBuffer[i] != 13)) i++;
     218:	05 c0       	rjmp	.+10     	; 0x224 <main+0x144>
     21a:	8a 85       	ldd	r24, Y+10	; 0x0a
     21c:	9b 85       	ldd	r25, Y+11	; 0x0b
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	9b 87       	std	Y+11, r25	; 0x0b
     222:	8a 87       	std	Y+10, r24	; 0x0a
     224:	8a 85       	ldd	r24, Y+10	; 0x0a
     226:	9b 85       	ldd	r25, Y+11	; 0x0b
     228:	80 5d       	subi	r24, 0xD0	; 208
     22a:	9b 4f       	sbci	r25, 0xFB	; 251
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	80 32       	cpi	r24, 0x20	; 32
     232:	41 f0       	breq	.+16     	; 0x244 <main+0x164>
     234:	8a 85       	ldd	r24, Y+10	; 0x0a
     236:	9b 85       	ldd	r25, Y+11	; 0x0b
     238:	80 5d       	subi	r24, 0xD0	; 208
     23a:	9b 4f       	sbci	r25, 0xFB	; 251
     23c:	fc 01       	movw	r30, r24
     23e:	80 81       	ld	r24, Z
     240:	8d 30       	cpi	r24, 0x0D	; 13
     242:	59 f7       	brne	.-42     	; 0x21a <main+0x13a>
                i++;
     244:	8a 85       	ldd	r24, Y+10	; 0x0a
     246:	9b 85       	ldd	r25, Y+11	; 0x0b
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	9b 87       	std	Y+11, r25	; 0x0b
     24c:	8a 87       	std	Y+10, r24	; 0x0a
                deceleration = atoi((char const *)UART_RxBuffer+i);
     24e:	8a 85       	ldd	r24, Y+10	; 0x0a
     250:	9b 85       	ldd	r25, Y+11	; 0x0b
     252:	80 5d       	subi	r24, 0xD0	; 208
     254:	9b 4f       	sbci	r25, 0xFB	; 251
     256:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     25a:	9e 83       	std	Y+6, r25	; 0x06
     25c:	8d 83       	std	Y+5, r24	; 0x05
                while((UART_RxBuffer[i] != ' ') && (UART_RxBuffer[i] != 13)) i++;
     25e:	05 c0       	rjmp	.+10     	; 0x26a <main+0x18a>
     260:	8a 85       	ldd	r24, Y+10	; 0x0a
     262:	9b 85       	ldd	r25, Y+11	; 0x0b
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	9b 87       	std	Y+11, r25	; 0x0b
     268:	8a 87       	std	Y+10, r24	; 0x0a
     26a:	8a 85       	ldd	r24, Y+10	; 0x0a
     26c:	9b 85       	ldd	r25, Y+11	; 0x0b
     26e:	80 5d       	subi	r24, 0xD0	; 208
     270:	9b 4f       	sbci	r25, 0xFB	; 251
     272:	fc 01       	movw	r30, r24
     274:	80 81       	ld	r24, Z
     276:	80 32       	cpi	r24, 0x20	; 32
     278:	41 f0       	breq	.+16     	; 0x28a <main+0x1aa>
     27a:	8a 85       	ldd	r24, Y+10	; 0x0a
     27c:	9b 85       	ldd	r25, Y+11	; 0x0b
     27e:	80 5d       	subi	r24, 0xD0	; 208
     280:	9b 4f       	sbci	r25, 0xFB	; 251
     282:	fc 01       	movw	r30, r24
     284:	80 81       	ld	r24, Z
     286:	8d 30       	cpi	r24, 0x0D	; 13
     288:	59 f7       	brne	.-42     	; 0x260 <main+0x180>
                i++;
     28a:	8a 85       	ldd	r24, Y+10	; 0x0a
     28c:	9b 85       	ldd	r25, Y+11	; 0x0b
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	9b 87       	std	Y+11, r25	; 0x0b
     292:	8a 87       	std	Y+10, r24	; 0x0a
                speed = atoi((char const *)UART_RxBuffer+i);
     294:	8a 85       	ldd	r24, Y+10	; 0x0a
     296:	9b 85       	ldd	r25, Y+11	; 0x0b
     298:	80 5d       	subi	r24, 0xD0	; 208
     29a:	9b 4f       	sbci	r25, 0xFB	; 251
     29c:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     2a0:	98 87       	std	Y+8, r25	; 0x08
     2a2:	8f 83       	std	Y+7, r24	; 0x07
                speed_cntr_Move(steps, acceleration, deceleration, speed);
     2a4:	6b 81       	ldd	r22, Y+3	; 0x03
     2a6:	7c 81       	ldd	r23, Y+4	; 0x04
     2a8:	4d 81       	ldd	r20, Y+5	; 0x05
     2aa:	5e 81       	ldd	r21, Y+6	; 0x06
     2ac:	2f 81       	ldd	r18, Y+7	; 0x07
     2ae:	38 85       	ldd	r19, Y+8	; 0x08
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <speed_cntr_Move>
                okCmd = TRUE;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	89 87       	std	Y+9, r24	; 0x09
                uart_SendString("\n\r  ");
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
     2c4:	4d c0       	rjmp	.+154    	; 0x360 <main+0x280>
              }
            }
          }
        }
      }
      else if(UART_RxBuffer[0] == 'a'){
     2c6:	80 91 30 04 	lds	r24, 0x0430
     2ca:	81 36       	cpi	r24, 0x61	; 97
     2cc:	71 f4       	brne	.+28     	; 0x2ea <main+0x20a>
        // Set acceleration.
        if(UART_RxBuffer[1] == ' '){
     2ce:	80 91 31 04 	lds	r24, 0x0431
     2d2:	80 32       	cpi	r24, 0x20	; 32
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <main+0x1f8>
     2d6:	44 c0       	rjmp	.+136    	; 0x360 <main+0x280>
          acceleration = atoi((char const *)UART_RxBuffer+2);
     2d8:	82 e3       	ldi	r24, 0x32	; 50
     2da:	94 e0       	ldi	r25, 0x04	; 4
     2dc:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     2e0:	9c 83       	std	Y+4, r25	; 0x04
     2e2:	8b 83       	std	Y+3, r24	; 0x03
          okCmd = TRUE;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	89 87       	std	Y+9, r24	; 0x09
     2e8:	3b c0       	rjmp	.+118    	; 0x360 <main+0x280>
        }
      }
      else if(UART_RxBuffer[0] == 'd'){
     2ea:	80 91 30 04 	lds	r24, 0x0430
     2ee:	84 36       	cpi	r24, 0x64	; 100
     2f0:	69 f4       	brne	.+26     	; 0x30c <main+0x22c>
        // Set deceleration.
        if(UART_RxBuffer[1] == ' '){
     2f2:	80 91 31 04 	lds	r24, 0x0431
     2f6:	80 32       	cpi	r24, 0x20	; 32
     2f8:	99 f5       	brne	.+102    	; 0x360 <main+0x280>
          deceleration = atoi((char const *)UART_RxBuffer+2);
     2fa:	82 e3       	ldi	r24, 0x32	; 50
     2fc:	94 e0       	ldi	r25, 0x04	; 4
     2fe:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     302:	9e 83       	std	Y+6, r25	; 0x06
     304:	8d 83       	std	Y+5, r24	; 0x05
          okCmd = TRUE;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	89 87       	std	Y+9, r24	; 0x09
     30a:	2a c0       	rjmp	.+84     	; 0x360 <main+0x280>
        }
      }
      else if(UART_RxBuffer[0] == 's'){
     30c:	80 91 30 04 	lds	r24, 0x0430
     310:	83 37       	cpi	r24, 0x73	; 115
     312:	69 f4       	brne	.+26     	; 0x32e <main+0x24e>
        if(UART_RxBuffer[1] == ' '){
     314:	80 91 31 04 	lds	r24, 0x0431
     318:	80 32       	cpi	r24, 0x20	; 32
     31a:	11 f5       	brne	.+68     	; 0x360 <main+0x280>
          speed = atoi((char const *)UART_RxBuffer+2);
     31c:	82 e3       	ldi	r24, 0x32	; 50
     31e:	94 e0       	ldi	r25, 0x04	; 4
     320:	0e 94 76 09 	call	0x12ec	; 0x12ec <atoi>
     324:	98 87       	std	Y+8, r25	; 0x08
     326:	8f 83       	std	Y+7, r24	; 0x07
          okCmd = TRUE;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	89 87       	std	Y+9, r24	; 0x09
     32c:	19 c0       	rjmp	.+50     	; 0x360 <main+0x280>
        }
      }
      else if(UART_RxBuffer[0] == 13){
     32e:	80 91 30 04 	lds	r24, 0x0430
     332:	8d 30       	cpi	r24, 0x0D	; 13
     334:	69 f4       	brne	.+26     	; 0x350 <main+0x270>
        speed_cntr_Move(steps, acceleration, deceleration, speed);
     336:	6b 81       	ldd	r22, Y+3	; 0x03
     338:	7c 81       	ldd	r23, Y+4	; 0x04
     33a:	4d 81       	ldd	r20, Y+5	; 0x05
     33c:	5e 81       	ldd	r21, Y+6	; 0x06
     33e:	2f 81       	ldd	r18, Y+7	; 0x07
     340:	38 85       	ldd	r19, Y+8	; 0x08
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	0e 94 db 02 	call	0x5b6	; 0x5b6 <speed_cntr_Move>
        okCmd = TRUE;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	89 87       	std	Y+9, r24	; 0x09
     34e:	08 c0       	rjmp	.+16     	; 0x360 <main+0x280>
      }
      else if(UART_RxBuffer[0] == '?'){
     350:	80 91 30 04 	lds	r24, 0x0430
     354:	8f 33       	cpi	r24, 0x3F	; 63
     356:	21 f4       	brne	.+8      	; 0x360 <main+0x280>
        ShowHelp();
     358:	0e 94 df 01 	call	0x3be	; 0x3be <ShowHelp>
        okCmd = TRUE;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	89 87       	std	Y+9, r24	; 0x09
      }

      // Send help if invalid command is received.
      if(okCmd != TRUE)
     360:	89 85       	ldd	r24, Y+9	; 0x09
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	11 f0       	breq	.+4      	; 0x36a <main+0x28a>
        ShowHelp();
     366:	0e 94 df 01 	call	0x3be	; 0x3be <ShowHelp>

      // Clear RXbuffer.
      status.cmd = FALSE;
     36a:	80 91 d6 03 	lds	r24, 0x03D6
     36e:	8d 7f       	andi	r24, 0xFD	; 253
     370:	80 93 d6 03 	sts	0x03D6, r24
      uart_FlushRxBuffer();
     374:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_FlushRxBuffer>

      if(status.running == TRUE){
     378:	80 91 d6 03 	lds	r24, 0x03D6
     37c:	81 70       	andi	r24, 0x01	; 1
     37e:	88 23       	and	r24, r24
     380:	71 f0       	breq	.+28     	; 0x39e <main+0x2be>
        uart_SendString("Running...");
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
        while(status.running == TRUE);
     38a:	00 00       	nop
     38c:	80 91 d6 03 	lds	r24, 0x03D6
     390:	81 70       	andi	r24, 0x01	; 1
     392:	88 23       	and	r24, r24
     394:	d9 f7       	brne	.-10     	; 0x38c <main+0x2ac>
        uart_SendString("OK\n\r");
     396:	83 e1       	ldi	r24, 0x13	; 19
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
      }

      ShowData(stepPosition, acceleration, deceleration, speed, steps);
     39e:	80 91 d7 03 	lds	r24, 0x03D7
     3a2:	90 91 d8 03 	lds	r25, 0x03D8
     3a6:	6b 81       	ldd	r22, Y+3	; 0x03
     3a8:	7c 81       	ldd	r23, Y+4	; 0x04
     3aa:	4d 81       	ldd	r20, Y+5	; 0x05
     3ac:	5e 81       	ldd	r21, Y+6	; 0x06
     3ae:	2f 81       	ldd	r18, Y+7	; 0x07
     3b0:	38 85       	ldd	r19, Y+8	; 0x08
     3b2:	e9 81       	ldd	r30, Y+1	; 0x01
     3b4:	fa 81       	ldd	r31, Y+2	; 0x02
     3b6:	8f 01       	movw	r16, r30
     3b8:	0e 94 02 02 	call	0x404	; 0x404 <ShowData>
    }//end if(cmd)
  }//end while(1)
     3bc:	c7 ce       	rjmp	.-626    	; 0x14c <main+0x6c>

000003be <ShowHelp>:
/*! \brief Sends help message.
 *
 *  Outputs help message.
 */
void ShowHelp(void)
{
     3be:	df 93       	push	r29
     3c0:	cf 93       	push	r28
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <ShowHelp+0x6>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
  unsigned int i = 0;
     3c8:	1a 82       	std	Y+2, r1	; 0x02
     3ca:	19 82       	std	Y+1, r1	; 0x01
  while(Help[i] != 0)
     3cc:	0e c0       	rjmp	.+28     	; 0x3ea <ShowHelp+0x2c>
    uart_SendByte(Help[i++]);
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	9a 81       	ldd	r25, Y+2	; 0x02
     3d2:	88 5e       	subi	r24, 0xE8	; 232
     3d4:	9e 4f       	sbci	r25, 0xFE	; 254
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 81       	ld	r18, Z
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	9a 81       	ldd	r25, Y+2	; 0x02
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
     3e4:	82 2f       	mov	r24, r18
     3e6:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
 *  Outputs help message.
 */
void ShowHelp(void)
{
  unsigned int i = 0;
  while(Help[i] != 0)
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	88 5e       	subi	r24, 0xE8	; 232
     3f0:	9e 4f       	sbci	r25, 0xFE	; 254
     3f2:	fc 01       	movw	r30, r24
     3f4:	80 81       	ld	r24, Z
     3f6:	88 23       	and	r24, r24
     3f8:	51 f7       	brne	.-44     	; 0x3ce <ShowHelp+0x10>
    uart_SendByte(Help[i++]);
}
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	cf 91       	pop	r28
     400:	df 91       	pop	r29
     402:	08 95       	ret

00000404 <ShowData>:
 *  \param deceleration Deceleration setting.
 *  \param speed Speed setting.
 *  \param steps Position of the stepper motor.
 */
void ShowData(int position, int acceleration, int deceleration, int speed, int steps)
{
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	2a 97       	sbiw	r28, 0x0a	; 10
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
     420:	7c 83       	std	Y+4, r23	; 0x04
     422:	6b 83       	std	Y+3, r22	; 0x03
     424:	5e 83       	std	Y+6, r21	; 0x06
     426:	4d 83       	std	Y+5, r20	; 0x05
     428:	38 87       	std	Y+8, r19	; 0x08
     42a:	2f 83       	std	Y+7, r18	; 0x07
     42c:	1a 87       	std	Y+10, r17	; 0x0a
     42e:	09 87       	std	Y+9, r16	; 0x09
  uart_SendString("\n\r  Motor pos: ");
     430:	87 e9       	ldi	r24, 0x97	; 151
     432:	93 e0       	ldi	r25, 0x03	; 3
     434:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
  uart_SendInt(position);
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	0e 94 cb 07 	call	0xf96	; 0xf96 <uart_SendInt>
  uart_SendString("    a:");
     440:	87 ea       	ldi	r24, 0xA7	; 167
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
  uart_SendInt(acceleration);
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	9c 81       	ldd	r25, Y+4	; 0x04
     44c:	0e 94 cb 07 	call	0xf96	; 0xf96 <uart_SendInt>
  uart_SendString("  d:");
     450:	8e ea       	ldi	r24, 0xAE	; 174
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
  uart_SendInt(deceleration);
     458:	8d 81       	ldd	r24, Y+5	; 0x05
     45a:	9e 81       	ldd	r25, Y+6	; 0x06
     45c:	0e 94 cb 07 	call	0xf96	; 0xf96 <uart_SendInt>
  uart_SendString("  s:");
     460:	83 eb       	ldi	r24, 0xB3	; 179
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
  uart_SendInt(speed);
     468:	8f 81       	ldd	r24, Y+7	; 0x07
     46a:	98 85       	ldd	r25, Y+8	; 0x08
     46c:	0e 94 cb 07 	call	0xf96	; 0xf96 <uart_SendInt>
  uart_SendString("  m:");
     470:	88 eb       	ldi	r24, 0xB8	; 184
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
  uart_SendInt(steps);
     478:	89 85       	ldd	r24, Y+9	; 0x09
     47a:	9a 85       	ldd	r25, Y+10	; 0x0a
     47c:	0e 94 cb 07 	call	0xf96	; 0xf96 <uart_SendInt>
  uart_SendString("\n\r> ");
     480:	8d eb       	ldi	r24, 0xBD	; 189
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	0e 94 a2 07 	call	0xf44	; 0xf44 <uart_SendString>
}
     488:	2a 96       	adiw	r28, 0x0a	; 10
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	cf 91       	pop	r28
     496:	df 91       	pop	r29
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	08 95       	ret

0000049e <sm_driver_Init_IO>:
int stepPosition = 0;

/*! \brief Init of io-pins for stepper motor.
 */
void sm_driver_Init_IO(void)
{
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
  // Init of IO pins
  SM_PORT &= ~((1<<A1) | (1<<A2) | (1<<B1) | (1<<B2)); // Set output pin registers to zero
     4a6:	8b e2       	ldi	r24, 0x2B	; 43
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	2b e2       	ldi	r18, 0x2B	; 43
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	2f 70       	andi	r18, 0x0F	; 15
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
  SM_DRIVE |= ((1<<A1) | (1<<A2) | (1<<B1) | (1<<B2)); // Set output pin direction registers to output
     4b8:	8a e2       	ldi	r24, 0x2A	; 42
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2a e2       	ldi	r18, 0x2A	; 42
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	20 6f       	ori	r18, 0xF0	; 240
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
}
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	08 95       	ret

000004d0 <sm_driver_StepCounter>:
 *
 *  \param inc  Direction to move.
 *  \return  Stepcounter value.
 */
unsigned char sm_driver_StepCounter(signed char inc)
{
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	0f 92       	push	r0
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	89 83       	std	Y+1, r24	; 0x01
  // Counts 0-1-...-6-7 in halfstep, 0-2-4-6 in fullstep
  static unsigned char counter = 0;
  // Update
  if(inc == CCW){
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	51 f4       	brne	.+20     	; 0x4f6 <sm_driver_StepCounter+0x26>
    stepPosition--;
     4e2:	80 91 d7 03 	lds	r24, 0x03D7
     4e6:	90 91 d8 03 	lds	r25, 0x03D8
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	90 93 d8 03 	sts	0x03D8, r25
     4f0:	80 93 d7 03 	sts	0x03D7, r24
     4f4:	09 c0       	rjmp	.+18     	; 0x508 <sm_driver_StepCounter+0x38>
  }
  else{
    stepPosition++;
     4f6:	80 91 d7 03 	lds	r24, 0x03D7
     4fa:	90 91 d8 03 	lds	r25, 0x03D8
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	90 93 d8 03 	sts	0x03D8, r25
     504:	80 93 d7 03 	sts	0x03D7, r24
  }

#ifdef HALFSTEPS
  if(inc){
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	88 23       	and	r24, r24
     50c:	31 f0       	breq	.+12     	; 0x51a <sm_driver_StepCounter+0x4a>
    counter++;
     50e:	80 91 d9 03 	lds	r24, 0x03D9
     512:	8f 5f       	subi	r24, 0xFF	; 255
     514:	80 93 d9 03 	sts	0x03D9, r24
     518:	05 c0       	rjmp	.+10     	; 0x524 <sm_driver_StepCounter+0x54>
  }
  else{
    counter--;
     51a:	80 91 d9 03 	lds	r24, 0x03D9
     51e:	81 50       	subi	r24, 0x01	; 1
     520:	80 93 d9 03 	sts	0x03D9, r24
    counter -= 2;
  }
#endif

  // Stay within the steptab
  counter &= 0x07;
     524:	80 91 d9 03 	lds	r24, 0x03D9
     528:	87 70       	andi	r24, 0x07	; 7
     52a:	80 93 d9 03 	sts	0x03D9, r24
  sm_driver_StepOutput(counter);
     52e:	80 91 d9 03 	lds	r24, 0x03D9
     532:	0e 94 a1 02 	call	0x542	; 0x542 <sm_driver_StepOutput>
  return(counter);
     536:	80 91 d9 03 	lds	r24, 0x03D9
}
     53a:	0f 90       	pop	r0
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	08 95       	ret

00000542 <sm_driver_StepOutput>:
 *  Converts these signals to work with the stepper driver hardware.
 *
 *  \param pos  Stepcounter value.
 */
void sm_driver_StepOutput(unsigned char pos)
{
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	00 d0       	rcall	.+0      	; 0x548 <sm_driver_StepOutput+0x6>
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char temp = steptab[pos];
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	8e 53       	subi	r24, 0x3E	; 62
     556:	9c 4f       	sbci	r25, 0xFC	; 252
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	89 83       	std	Y+1, r24	; 0x01
  else
    SM_PORT &= ~(1<<B2);
  */

  // Output the fast way
  SM_PORT |= ((temp<<4)&0xF0);
     55e:	8b e2       	ldi	r24, 0x2B	; 43
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	2b e2       	ldi	r18, 0x2B	; 43
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	42 2f       	mov	r20, r18
     56c:	29 81       	ldd	r18, Y+1	; 0x01
     56e:	22 2f       	mov	r18, r18
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	22 95       	swap	r18
     574:	32 95       	swap	r19
     576:	30 7f       	andi	r19, 0xF0	; 240
     578:	32 27       	eor	r19, r18
     57a:	20 7f       	andi	r18, 0xF0	; 240
     57c:	32 27       	eor	r19, r18
     57e:	24 2b       	or	r18, r20
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
  SM_PORT &= ((temp<<4)|0x0F);
     584:	8b e2       	ldi	r24, 0x2B	; 43
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2b e2       	ldi	r18, 0x2B	; 43
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	42 2f       	mov	r20, r18
     592:	29 81       	ldd	r18, Y+1	; 0x01
     594:	22 2f       	mov	r18, r18
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	22 95       	swap	r18
     59a:	32 95       	swap	r19
     59c:	30 7f       	andi	r19, 0xF0	; 240
     59e:	32 27       	eor	r19, r18
     5a0:	20 7f       	andi	r18, 0xF0	; 240
     5a2:	32 27       	eor	r19, r18
     5a4:	2f 60       	ori	r18, 0x0F	; 15
     5a6:	24 23       	and	r18, r20
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
}
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	08 95       	ret

000005b6 <speed_cntr_Move>:
 *  \param accel  Accelration to use, in 0.01*rad/sec^2.
 *  \param decel  Decelration to use, in 0.01*rad/sec^2.
 *  \param speed  Max speed, in 0.01*rad/sec.
 */
void speed_cntr_Move(signed int step, unsigned int accel, unsigned int decel, unsigned int speed)
{
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	df 93       	push	r29
     5c0:	cf 93       	push	r28
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	2c 97       	sbiw	r28, 0x0c	; 12
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	9e 83       	std	Y+6, r25	; 0x06
     5d4:	8d 83       	std	Y+5, r24	; 0x05
     5d6:	78 87       	std	Y+8, r23	; 0x08
     5d8:	6f 83       	std	Y+7, r22	; 0x07
     5da:	5a 87       	std	Y+10, r21	; 0x0a
     5dc:	49 87       	std	Y+9, r20	; 0x09
     5de:	3c 87       	std	Y+12, r19	; 0x0c
     5e0:	2b 87       	std	Y+11, r18	; 0x0b
  unsigned int max_s_lim;
  //! Number of steps before we must start deceleration (if accel does not hit max speed).
  unsigned int accel_lim;

  // Set direction from sign on step value.
  if(step < 0){
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	9e 81       	ldd	r25, Y+6	; 0x06
     5e6:	99 23       	and	r25, r25
     5e8:	6c f4       	brge	.+26     	; 0x604 <speed_cntr_Move+0x4e>
    srd.dir = CCW;
     5ea:	80 91 24 04 	lds	r24, 0x0424
     5ee:	88 60       	ori	r24, 0x08	; 8
     5f0:	80 93 24 04 	sts	0x0424, r24
    step = -step;
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	90 95       	com	r25
     5fa:	81 95       	neg	r24
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	9e 83       	std	Y+6, r25	; 0x06
     600:	8d 83       	std	Y+5, r24	; 0x05
     602:	05 c0       	rjmp	.+10     	; 0x60e <speed_cntr_Move+0x58>
  }
  else{
    srd.dir = CW;
     604:	80 91 24 04 	lds	r24, 0x0424
     608:	87 7f       	andi	r24, 0xF7	; 247
     60a:	80 93 24 04 	sts	0x0424, r24
  }

  // If moving only 1 step.
  if(step == 1){
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	9e 81       	ldd	r25, Y+6	; 0x06
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	91 05       	cpc	r25, r1
     616:	41 f5       	brne	.+80     	; 0x668 <speed_cntr_Move+0xb2>
    // Move one step...
    srd.accel_count = -1;
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	9f ef       	ldi	r25, 0xFF	; 255
     61c:	90 93 2e 04 	sts	0x042E, r25
     620:	80 93 2d 04 	sts	0x042D, r24
    // ...in DECEL state.
    srd.run_state = DECEL;
     624:	80 91 24 04 	lds	r24, 0x0424
     628:	88 7f       	andi	r24, 0xF8	; 248
     62a:	82 60       	ori	r24, 0x02	; 2
     62c:	80 93 24 04 	sts	0x0424, r24
    // Just a short delay so main() can act on 'running'.
    srd.step_delay = 1000;
     630:	88 ee       	ldi	r24, 0xE8	; 232
     632:	93 e0       	ldi	r25, 0x03	; 3
     634:	90 93 26 04 	sts	0x0426, r25
     638:	80 93 25 04 	sts	0x0425, r24
    status.running = TRUE;
     63c:	80 91 d6 03 	lds	r24, 0x03D6
     640:	81 60       	ori	r24, 0x01	; 1
     642:	80 93 d6 03 	sts	0x03D6, r24
    OCR1A = 10;
     646:	88 e8       	ldi	r24, 0x88	; 136
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	2a e0       	ldi	r18, 0x0A	; 10
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	fc 01       	movw	r30, r24
     650:	31 83       	std	Z+1, r19	; 0x01
     652:	20 83       	st	Z, r18
    // Run Timer/Counter 1 with prescaler = 8.
    TCCR1B |= ((0<<CS12)|(1<<CS11)|(0<<CS10));
     654:	81 e8       	ldi	r24, 0x81	; 129
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	21 e8       	ldi	r18, 0x81	; 129
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	f9 01       	movw	r30, r18
     65e:	20 81       	ld	r18, Z
     660:	22 60       	ori	r18, 0x02	; 2
     662:	fc 01       	movw	r30, r24
     664:	20 83       	st	Z, r18
     666:	31 c1       	rjmp	.+610    	; 0x8ca <speed_cntr_Move+0x314>
  }
  // Only move if number of steps to move is not zero.
  else if(step != 0){
     668:	8d 81       	ldd	r24, Y+5	; 0x05
     66a:	9e 81       	ldd	r25, Y+6	; 0x06
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	09 f4       	brne	.+2      	; 0x672 <speed_cntr_Move+0xbc>
     670:	2c c1       	rjmp	.+600    	; 0x8ca <speed_cntr_Move+0x314>
    // Refer to documentation for detailed information about these calculations.

    // Set max speed limit, by calc min_delay to use in timer.
    // min_delay = (alpha / tt)/ w
    srd.min_delay = A_T_x100 / speed;
     672:	8b 85       	ldd	r24, Y+11	; 0x0b
     674:	9c 85       	ldd	r25, Y+12	; 0x0c
     676:	9c 01       	movw	r18, r24
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	8f e1       	ldi	r24, 0x1F	; 31
     67e:	9b e0       	ldi	r25, 0x0B	; 11
     680:	ab e0       	ldi	r26, 0x0B	; 11
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     68c:	da 01       	movw	r26, r20
     68e:	c9 01       	movw	r24, r18
     690:	90 93 2c 04 	sts	0x042C, r25
     694:	80 93 2b 04 	sts	0x042B, r24

    // Set accelration by calc the first (c0) step delay .
    // step_delay = 1/tt * sqrt(2*alpha/accel)
    // step_delay = ( tfreq*0.676/100 )*100 * sqrt( (2*alpha*10000000000) / (accel*100) )/10000
    srd.step_delay = (T1_FREQ_148 * sqart(A_SQ / accel))/100;
     698:	8f 81       	ldd	r24, Y+7	; 0x07
     69a:	98 85       	ldd	r25, Y+8	; 0x08
     69c:	9c 01       	movw	r18, r24
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	80 ea       	ldi	r24, 0xA0	; 160
     6a4:	9f ea       	ldi	r25, 0xAF	; 175
     6a6:	a9 eb       	ldi	r26, 0xB9	; 185
     6a8:	b2 e1       	ldi	r27, 0x12	; 18
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     6b2:	da 01       	movw	r26, r20
     6b4:	c9 01       	movw	r24, r18
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	0e 94 79 06 	call	0xcf2	; 0xcf2 <sqart>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	2a e2       	ldi	r18, 0x2A	; 42
     6c4:	3c e0       	ldi	r19, 0x0C	; 12
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	0e 94 06 09 	call	0x120c	; 0x120c <__mulsi3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	24 e6       	ldi	r18, 0x64	; 100
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	0e 94 39 09 	call	0x1272	; 0x1272 <__udivmodsi4>
     6e6:	da 01       	movw	r26, r20
     6e8:	c9 01       	movw	r24, r18
     6ea:	90 93 26 04 	sts	0x0426, r25
     6ee:	80 93 25 04 	sts	0x0425, r24

    // Find out after how many steps does the speed hit the max speed limit.
    // max_s_lim = speed^2 / (2*alpha*accel)
    max_s_lim = (long)speed*speed/(long)(((long)A_x20000*accel)/100);
     6f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f6:	cc 01       	movw	r24, r24
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	2b 85       	ldd	r18, Y+11	; 0x0b
     6fe:	3c 85       	ldd	r19, Y+12	; 0x0c
     700:	99 01       	movw	r18, r18
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	bc 01       	movw	r22, r24
     708:	cd 01       	movw	r24, r26
     70a:	0e 94 06 09 	call	0x120c	; 0x120c <__mulsi3>
     70e:	7b 01       	movw	r14, r22
     710:	8c 01       	movw	r16, r24
     712:	8f 81       	ldd	r24, Y+7	; 0x07
     714:	98 85       	ldd	r25, Y+8	; 0x08
     716:	cc 01       	movw	r24, r24
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	2a e3       	ldi	r18, 0x3A	; 58
     71e:	31 e0       	ldi	r19, 0x01	; 1
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	bc 01       	movw	r22, r24
     726:	cd 01       	movw	r24, r26
     728:	0e 94 06 09 	call	0x120c	; 0x120c <__mulsi3>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	24 e6       	ldi	r18, 0x64	; 100
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     740:	c8 01       	movw	r24, r16
     742:	b7 01       	movw	r22, r14
     744:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     748:	da 01       	movw	r26, r20
     74a:	c9 01       	movw	r24, r18
     74c:	9a 83       	std	Y+2, r25	; 0x02
     74e:	89 83       	std	Y+1, r24	; 0x01
    // If we hit max speed limit before 0,5 step it will round to 0.
    // But in practice we need to move atleast 1 step to get any speed at all.
    if(max_s_lim == 0){
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	9a 81       	ldd	r25, Y+2	; 0x02
     754:	00 97       	sbiw	r24, 0x00	; 0
     756:	21 f4       	brne	.+8      	; 0x760 <speed_cntr_Move+0x1aa>
      max_s_lim = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	89 83       	std	Y+1, r24	; 0x01
    }

    // Find out after how many steps we must start deceleration.
    // n1 = (n1+n2)decel / (accel + decel)
    accel_lim = ((long)step*decel) / (accel+decel);
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	9e 81       	ldd	r25, Y+6	; 0x06
     764:	aa 27       	eor	r26, r26
     766:	97 fd       	sbrc	r25, 7
     768:	a0 95       	com	r26
     76a:	ba 2f       	mov	r27, r26
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	3a 85       	ldd	r19, Y+10	; 0x0a
     770:	99 01       	movw	r18, r18
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	bc 01       	movw	r22, r24
     778:	cd 01       	movw	r24, r26
     77a:	0e 94 06 09 	call	0x120c	; 0x120c <__mulsi3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	4f 81       	ldd	r20, Y+7	; 0x07
     784:	58 85       	ldd	r21, Y+8	; 0x08
     786:	29 85       	ldd	r18, Y+9	; 0x09
     788:	3a 85       	ldd	r19, Y+10	; 0x0a
     78a:	24 0f       	add	r18, r20
     78c:	35 1f       	adc	r19, r21
     78e:	99 01       	movw	r18, r18
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	bc 01       	movw	r22, r24
     796:	cd 01       	movw	r24, r26
     798:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     79c:	da 01       	movw	r26, r20
     79e:	c9 01       	movw	r24, r18
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	8b 83       	std	Y+3, r24	; 0x03
    // We must accelrate at least 1 step before we can start deceleration.
    if(accel_lim == 0){
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	9c 81       	ldd	r25, Y+4	; 0x04
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <speed_cntr_Move+0x1fe>
      accel_lim = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Use the limit we hit first to calc decel.
    if(accel_lim <= max_s_lim){
     7b4:	2b 81       	ldd	r18, Y+3	; 0x03
     7b6:	3c 81       	ldd	r19, Y+4	; 0x04
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	82 17       	cp	r24, r18
     7be:	93 07       	cpc	r25, r19
     7c0:	68 f0       	brcs	.+26     	; 0x7dc <speed_cntr_Move+0x226>
      srd.decel_val = accel_lim - step;
     7c2:	8d 81       	ldd	r24, Y+5	; 0x05
     7c4:	9e 81       	ldd	r25, Y+6	; 0x06
     7c6:	2b 81       	ldd	r18, Y+3	; 0x03
     7c8:	3c 81       	ldd	r19, Y+4	; 0x04
     7ca:	a9 01       	movw	r20, r18
     7cc:	48 1b       	sub	r20, r24
     7ce:	59 0b       	sbc	r21, r25
     7d0:	ca 01       	movw	r24, r20
     7d2:	90 93 2a 04 	sts	0x042A, r25
     7d6:	80 93 29 04 	sts	0x0429, r24
     7da:	26 c0       	rjmp	.+76     	; 0x828 <speed_cntr_Move+0x272>
    }
    else{
      srd.decel_val = -((long)max_s_lim*accel)/decel;
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	cc 01       	movw	r24, r24
     7e2:	a0 e0       	ldi	r26, 0x00	; 0
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	2f 81       	ldd	r18, Y+7	; 0x07
     7e8:	38 85       	ldd	r19, Y+8	; 0x08
     7ea:	99 01       	movw	r18, r18
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	bc 01       	movw	r22, r24
     7f2:	cd 01       	movw	r24, r26
     7f4:	0e 94 06 09 	call	0x120c	; 0x120c <__mulsi3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	b0 95       	com	r27
     7fe:	a0 95       	com	r26
     800:	90 95       	com	r25
     802:	81 95       	neg	r24
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	af 4f       	sbci	r26, 0xFF	; 255
     808:	bf 4f       	sbci	r27, 0xFF	; 255
     80a:	29 85       	ldd	r18, Y+9	; 0x09
     80c:	3a 85       	ldd	r19, Y+10	; 0x0a
     80e:	99 01       	movw	r18, r18
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	bc 01       	movw	r22, r24
     816:	cd 01       	movw	r24, r26
     818:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     81c:	da 01       	movw	r26, r20
     81e:	c9 01       	movw	r24, r18
     820:	90 93 2a 04 	sts	0x042A, r25
     824:	80 93 29 04 	sts	0x0429, r24
    }
    // We must decelrate at least 1 step to stop.
    if(srd.decel_val == 0){
     828:	80 91 29 04 	lds	r24, 0x0429
     82c:	90 91 2a 04 	lds	r25, 0x042A
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	31 f4       	brne	.+12     	; 0x840 <speed_cntr_Move+0x28a>
      srd.decel_val = -1;
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	9f ef       	ldi	r25, 0xFF	; 255
     838:	90 93 2a 04 	sts	0x042A, r25
     83c:	80 93 29 04 	sts	0x0429, r24
    }

    // Find step to start decleration.
    srd.decel_start = step + srd.decel_val;
     840:	20 91 29 04 	lds	r18, 0x0429
     844:	30 91 2a 04 	lds	r19, 0x042A
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	90 93 28 04 	sts	0x0428, r25
     854:	80 93 27 04 	sts	0x0427, r24

    // If the maximum speed is so low that we dont need to go via accelration state.
    if(srd.step_delay <= srd.min_delay){
     858:	20 91 25 04 	lds	r18, 0x0425
     85c:	30 91 26 04 	lds	r19, 0x0426
     860:	80 91 2b 04 	lds	r24, 0x042B
     864:	90 91 2c 04 	lds	r25, 0x042C
     868:	82 17       	cp	r24, r18
     86a:	93 07       	cpc	r25, r19
     86c:	78 f0       	brcs	.+30     	; 0x88c <speed_cntr_Move+0x2d6>
      srd.step_delay = srd.min_delay;
     86e:	80 91 2b 04 	lds	r24, 0x042B
     872:	90 91 2c 04 	lds	r25, 0x042C
     876:	90 93 26 04 	sts	0x0426, r25
     87a:	80 93 25 04 	sts	0x0425, r24
      srd.run_state = RUN;
     87e:	80 91 24 04 	lds	r24, 0x0424
     882:	88 7f       	andi	r24, 0xF8	; 248
     884:	83 60       	ori	r24, 0x03	; 3
     886:	80 93 24 04 	sts	0x0424, r24
     88a:	06 c0       	rjmp	.+12     	; 0x898 <speed_cntr_Move+0x2e2>
    }
    else{
      srd.run_state = ACCEL;
     88c:	80 91 24 04 	lds	r24, 0x0424
     890:	88 7f       	andi	r24, 0xF8	; 248
     892:	81 60       	ori	r24, 0x01	; 1
     894:	80 93 24 04 	sts	0x0424, r24
    }

    // Reset counter.
    srd.accel_count = 0;
     898:	10 92 2e 04 	sts	0x042E, r1
     89c:	10 92 2d 04 	sts	0x042D, r1
    status.running = TRUE;
     8a0:	80 91 d6 03 	lds	r24, 0x03D6
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	80 93 d6 03 	sts	0x03D6, r24
    OCR1A = 10;
     8aa:	88 e8       	ldi	r24, 0x88	; 136
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	2a e0       	ldi	r18, 0x0A	; 10
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	31 83       	std	Z+1, r19	; 0x01
     8b6:	20 83       	st	Z, r18
    // Set Timer/Counter to divide clock by 8
    TCCR1B |= ((0<<CS12)|(1<<CS11)|(0<<CS10));
     8b8:	81 e8       	ldi	r24, 0x81	; 129
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	21 e8       	ldi	r18, 0x81	; 129
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	22 60       	ori	r18, 0x02	; 2
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
  }
}
     8ca:	2c 96       	adiw	r28, 0x0c	; 12
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	cf 91       	pop	r28
     8d8:	df 91       	pop	r29
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	08 95       	ret

000008e4 <speed_cntr_Init_Timer1>:
 *
 *  Set up Timer/Counter1 to use mode 1 CTC and
 *  enable Output Compare A Match Interrupt.
 */
void speed_cntr_Init_Timer1(void)
{
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
  // Tells what part of speed ramp we are in.
  srd.run_state = STOP;
     8ec:	80 91 24 04 	lds	r24, 0x0424
     8f0:	88 7f       	andi	r24, 0xF8	; 248
     8f2:	80 93 24 04 	sts	0x0424, r24
  // Timer/Counter 1 in mode 4 CTC (Not running).
  TCCR1B = (1<<WGM12);
     8f6:	81 e8       	ldi	r24, 0x81	; 129
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	28 e0       	ldi	r18, 0x08	; 8
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
  // Timer/Counter 1 Output Compare A Match Interrupt enable.
  TIMSK1 = (1<<OCIE1A);
     900:	8f e6       	ldi	r24, 0x6F	; 111
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	22 e0       	ldi	r18, 0x02	; 2
     906:	fc 01       	movw	r30, r24
     908:	20 83       	st	Z, r18
}
     90a:	cf 91       	pop	r28
     90c:	df 91       	pop	r29
     90e:	08 95       	ret

00000910 <__vector_13>:
 *  on basis of accel/decel parameters.
 */
//#pragma vector=TIMER1_COMPA_vect
//__interrupt void speed_cntr_TIMER1_COMPA_interrupt( void )
ISR(TIMER1_COMPA_vect)
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	00 d0       	rcall	.+0      	; 0x93c <__vector_13+0x2c>
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
  // Counting steps when moving.
  static unsigned int step_count = 0;
  // Keep track of remainder from new_step-delay calculation to incrase accurancy
  static unsigned int rest = 0;

  OCR1A = srd.step_delay;
     940:	88 e8       	ldi	r24, 0x88	; 136
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	20 91 25 04 	lds	r18, 0x0425
     948:	30 91 26 04 	lds	r19, 0x0426
     94c:	fc 01       	movw	r30, r24
     94e:	31 83       	std	Z+1, r19	; 0x01
     950:	20 83       	st	Z, r18

  switch(srd.run_state) {
     952:	80 91 24 04 	lds	r24, 0x0424
     956:	87 70       	andi	r24, 0x07	; 7
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	91 05       	cpc	r25, r1
     960:	31 f1       	breq	.+76     	; 0x9ae <__vector_13+0x9e>
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	91 05       	cpc	r25, r1
     966:	1c f4       	brge	.+6      	; 0x96e <__vector_13+0x5e>
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	51 f0       	breq	.+20     	; 0x980 <__vector_13+0x70>
     96c:	a5 c1       	rjmp	.+842    	; 0xcb8 <__vector_13+0x3a8>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	91 05       	cpc	r25, r1
     972:	09 f4       	brne	.+2      	; 0x976 <__vector_13+0x66>
     974:	10 c1       	rjmp	.+544    	; 0xb96 <__vector_13+0x286>
     976:	83 30       	cpi	r24, 0x03	; 3
     978:	91 05       	cpc	r25, r1
     97a:	09 f4       	brne	.+2      	; 0x97e <__vector_13+0x6e>
     97c:	d4 c0       	rjmp	.+424    	; 0xb26 <__vector_13+0x216>
     97e:	9c c1       	rjmp	.+824    	; 0xcb8 <__vector_13+0x3a8>
    case STOP:
      step_count = 0;
     980:	10 92 db 03 	sts	0x03DB, r1
     984:	10 92 da 03 	sts	0x03DA, r1
      rest = 0;
     988:	10 92 dd 03 	sts	0x03DD, r1
     98c:	10 92 dc 03 	sts	0x03DC, r1
      // Stop Timer/Counter 1.
      TCCR1B &= ~((1<<CS12)|(1<<CS11)|(1<<CS10));
     990:	81 e8       	ldi	r24, 0x81	; 129
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	21 e8       	ldi	r18, 0x81	; 129
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	f9 01       	movw	r30, r18
     99a:	20 81       	ld	r18, Z
     99c:	28 7f       	andi	r18, 0xF8	; 248
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
      status.running = FALSE;
     9a2:	80 91 d6 03 	lds	r24, 0x03D6
     9a6:	8e 7f       	andi	r24, 0xFE	; 254
     9a8:	80 93 d6 03 	sts	0x03D6, r24
      break;
     9ac:	85 c1       	rjmp	.+778    	; 0xcb8 <__vector_13+0x3a8>

    case ACCEL:
      sm_driver_StepCounter(srd.dir);
     9ae:	80 91 24 04 	lds	r24, 0x0424
     9b2:	86 95       	lsr	r24
     9b4:	86 95       	lsr	r24
     9b6:	86 95       	lsr	r24
     9b8:	81 70       	andi	r24, 0x01	; 1
     9ba:	0e 94 68 02 	call	0x4d0	; 0x4d0 <sm_driver_StepCounter>
      step_count++;
     9be:	80 91 da 03 	lds	r24, 0x03DA
     9c2:	90 91 db 03 	lds	r25, 0x03DB
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	90 93 db 03 	sts	0x03DB, r25
     9cc:	80 93 da 03 	sts	0x03DA, r24
      srd.accel_count++;
     9d0:	80 91 2d 04 	lds	r24, 0x042D
     9d4:	90 91 2e 04 	lds	r25, 0x042E
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	90 93 2e 04 	sts	0x042E, r25
     9de:	80 93 2d 04 	sts	0x042D, r24
      new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest)/(4 * srd.accel_count + 1));
     9e2:	00 91 25 04 	lds	r16, 0x0425
     9e6:	10 91 26 04 	lds	r17, 0x0426
     9ea:	80 91 25 04 	lds	r24, 0x0425
     9ee:	90 91 26 04 	lds	r25, 0x0426
     9f2:	cc 01       	movw	r24, r24
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	9c 01       	movw	r18, r24
     9fa:	ad 01       	movw	r20, r26
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	44 1f       	adc	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	80 91 dc 03 	lds	r24, 0x03DC
     a08:	90 91 dd 03 	lds	r25, 0x03DD
     a0c:	cc 01       	movw	r24, r24
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	a4 1f       	adc	r26, r20
     a18:	b5 1f       	adc	r27, r21
     a1a:	20 91 2d 04 	lds	r18, 0x042D
     a1e:	30 91 2e 04 	lds	r19, 0x042E
     a22:	22 0f       	add	r18, r18
     a24:	33 1f       	adc	r19, r19
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	2f 5f       	subi	r18, 0xFF	; 255
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	44 27       	eor	r20, r20
     a30:	37 fd       	sbrc	r19, 7
     a32:	40 95       	com	r20
     a34:	54 2f       	mov	r21, r20
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     a3e:	da 01       	movw	r26, r20
     a40:	c9 01       	movw	r24, r18
     a42:	98 01       	movw	r18, r16
     a44:	28 1b       	sub	r18, r24
     a46:	39 0b       	sbc	r19, r25
     a48:	c9 01       	movw	r24, r18
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
      rest = ((2 * (long)srd.step_delay)+rest)%(4 * srd.accel_count + 1);
     a4e:	80 91 25 04 	lds	r24, 0x0425
     a52:	90 91 26 04 	lds	r25, 0x0426
     a56:	cc 01       	movw	r24, r24
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	9c 01       	movw	r18, r24
     a5e:	ad 01       	movw	r20, r26
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	44 1f       	adc	r20, r20
     a66:	55 1f       	adc	r21, r21
     a68:	80 91 dc 03 	lds	r24, 0x03DC
     a6c:	90 91 dd 03 	lds	r25, 0x03DD
     a70:	cc 01       	movw	r24, r24
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	82 0f       	add	r24, r18
     a78:	93 1f       	adc	r25, r19
     a7a:	a4 1f       	adc	r26, r20
     a7c:	b5 1f       	adc	r27, r21
     a7e:	20 91 2d 04 	lds	r18, 0x042D
     a82:	30 91 2e 04 	lds	r19, 0x042E
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	22 0f       	add	r18, r18
     a8c:	33 1f       	adc	r19, r19
     a8e:	2f 5f       	subi	r18, 0xFF	; 255
     a90:	3f 4f       	sbci	r19, 0xFF	; 255
     a92:	44 27       	eor	r20, r20
     a94:	37 fd       	sbrc	r19, 7
     a96:	40 95       	com	r20
     a98:	54 2f       	mov	r21, r20
     a9a:	bc 01       	movw	r22, r24
     a9c:	cd 01       	movw	r24, r26
     a9e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	90 93 dd 03 	sts	0x03DD, r25
     aaa:	80 93 dc 03 	sts	0x03DC, r24
      // Chech if we should start decelration.
      if(step_count >= srd.decel_start) {
     aae:	20 91 27 04 	lds	r18, 0x0427
     ab2:	30 91 28 04 	lds	r19, 0x0428
     ab6:	80 91 da 03 	lds	r24, 0x03DA
     aba:	90 91 db 03 	lds	r25, 0x03DB
     abe:	82 17       	cp	r24, r18
     ac0:	93 07       	cpc	r25, r19
     ac2:	78 f0       	brcs	.+30     	; 0xae2 <__vector_13+0x1d2>
        srd.accel_count = srd.decel_val;
     ac4:	80 91 29 04 	lds	r24, 0x0429
     ac8:	90 91 2a 04 	lds	r25, 0x042A
     acc:	90 93 2e 04 	sts	0x042E, r25
     ad0:	80 93 2d 04 	sts	0x042D, r24
        srd.run_state = DECEL;
     ad4:	80 91 24 04 	lds	r24, 0x0424
     ad8:	88 7f       	andi	r24, 0xF8	; 248
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	80 93 24 04 	sts	0x0424, r24
        last_accel_delay = new_step_delay;
        new_step_delay = srd.min_delay;
        rest = 0;
        srd.run_state = RUN;
      }
      break;
     ae0:	eb c0       	rjmp	.+470    	; 0xcb8 <__vector_13+0x3a8>
      if(step_count >= srd.decel_start) {
        srd.accel_count = srd.decel_val;
        srd.run_state = DECEL;
      }
      // Chech if we hitted max speed.
      else if(new_step_delay <= srd.min_delay) {
     ae2:	80 91 2b 04 	lds	r24, 0x042B
     ae6:	90 91 2c 04 	lds	r25, 0x042C
     aea:	9c 01       	movw	r18, r24
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	28 17       	cp	r18, r24
     af2:	39 07       	cpc	r19, r25
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <__vector_13+0x1e8>
     af6:	db c0       	rjmp	.+438    	; 0xcae <__vector_13+0x39e>
        last_accel_delay = new_step_delay;
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	90 93 df 03 	sts	0x03DF, r25
     b00:	80 93 de 03 	sts	0x03DE, r24
        new_step_delay = srd.min_delay;
     b04:	80 91 2b 04 	lds	r24, 0x042B
     b08:	90 91 2c 04 	lds	r25, 0x042C
     b0c:	9a 83       	std	Y+2, r25	; 0x02
     b0e:	89 83       	std	Y+1, r24	; 0x01
        rest = 0;
     b10:	10 92 dd 03 	sts	0x03DD, r1
     b14:	10 92 dc 03 	sts	0x03DC, r1
        srd.run_state = RUN;
     b18:	80 91 24 04 	lds	r24, 0x0424
     b1c:	88 7f       	andi	r24, 0xF8	; 248
     b1e:	83 60       	ori	r24, 0x03	; 3
     b20:	80 93 24 04 	sts	0x0424, r24
      }
      break;
     b24:	c9 c0       	rjmp	.+402    	; 0xcb8 <__vector_13+0x3a8>

    case RUN:
      sm_driver_StepCounter(srd.dir);
     b26:	80 91 24 04 	lds	r24, 0x0424
     b2a:	86 95       	lsr	r24
     b2c:	86 95       	lsr	r24
     b2e:	86 95       	lsr	r24
     b30:	81 70       	andi	r24, 0x01	; 1
     b32:	0e 94 68 02 	call	0x4d0	; 0x4d0 <sm_driver_StepCounter>
      step_count++;
     b36:	80 91 da 03 	lds	r24, 0x03DA
     b3a:	90 91 db 03 	lds	r25, 0x03DB
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	90 93 db 03 	sts	0x03DB, r25
     b44:	80 93 da 03 	sts	0x03DA, r24
      new_step_delay = srd.min_delay;
     b48:	80 91 2b 04 	lds	r24, 0x042B
     b4c:	90 91 2c 04 	lds	r25, 0x042C
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
      // Chech if we should start decelration.
      if(step_count >= srd.decel_start) {
     b54:	20 91 27 04 	lds	r18, 0x0427
     b58:	30 91 28 04 	lds	r19, 0x0428
     b5c:	80 91 da 03 	lds	r24, 0x03DA
     b60:	90 91 db 03 	lds	r25, 0x03DB
     b64:	82 17       	cp	r24, r18
     b66:	93 07       	cpc	r25, r19
     b68:	08 f4       	brcc	.+2      	; 0xb6c <__vector_13+0x25c>
     b6a:	a3 c0       	rjmp	.+326    	; 0xcb2 <__vector_13+0x3a2>
        srd.accel_count = srd.decel_val;
     b6c:	80 91 29 04 	lds	r24, 0x0429
     b70:	90 91 2a 04 	lds	r25, 0x042A
     b74:	90 93 2e 04 	sts	0x042E, r25
     b78:	80 93 2d 04 	sts	0x042D, r24
        // Start decelration with same delay as accel ended with.
        new_step_delay = last_accel_delay;
     b7c:	80 91 de 03 	lds	r24, 0x03DE
     b80:	90 91 df 03 	lds	r25, 0x03DF
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
        srd.run_state = DECEL;
     b88:	80 91 24 04 	lds	r24, 0x0424
     b8c:	88 7f       	andi	r24, 0xF8	; 248
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	80 93 24 04 	sts	0x0424, r24
      }
      break;
     b94:	91 c0       	rjmp	.+290    	; 0xcb8 <__vector_13+0x3a8>

    case DECEL:
      sm_driver_StepCounter(srd.dir);
     b96:	80 91 24 04 	lds	r24, 0x0424
     b9a:	86 95       	lsr	r24
     b9c:	86 95       	lsr	r24
     b9e:	86 95       	lsr	r24
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <sm_driver_StepCounter>
      step_count++;
     ba6:	80 91 da 03 	lds	r24, 0x03DA
     baa:	90 91 db 03 	lds	r25, 0x03DB
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	90 93 db 03 	sts	0x03DB, r25
     bb4:	80 93 da 03 	sts	0x03DA, r24
      srd.accel_count++;
     bb8:	80 91 2d 04 	lds	r24, 0x042D
     bbc:	90 91 2e 04 	lds	r25, 0x042E
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	90 93 2e 04 	sts	0x042E, r25
     bc6:	80 93 2d 04 	sts	0x042D, r24
      new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest)/(4 * srd.accel_count + 1));
     bca:	00 91 25 04 	lds	r16, 0x0425
     bce:	10 91 26 04 	lds	r17, 0x0426
     bd2:	80 91 25 04 	lds	r24, 0x0425
     bd6:	90 91 26 04 	lds	r25, 0x0426
     bda:	cc 01       	movw	r24, r24
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	9c 01       	movw	r18, r24
     be2:	ad 01       	movw	r20, r26
     be4:	22 0f       	add	r18, r18
     be6:	33 1f       	adc	r19, r19
     be8:	44 1f       	adc	r20, r20
     bea:	55 1f       	adc	r21, r21
     bec:	80 91 dc 03 	lds	r24, 0x03DC
     bf0:	90 91 dd 03 	lds	r25, 0x03DD
     bf4:	cc 01       	movw	r24, r24
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	a4 1f       	adc	r26, r20
     c00:	b5 1f       	adc	r27, r21
     c02:	20 91 2d 04 	lds	r18, 0x042D
     c06:	30 91 2e 04 	lds	r19, 0x042E
     c0a:	22 0f       	add	r18, r18
     c0c:	33 1f       	adc	r19, r19
     c0e:	22 0f       	add	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	2f 5f       	subi	r18, 0xFF	; 255
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
     c16:	44 27       	eor	r20, r20
     c18:	37 fd       	sbrc	r19, 7
     c1a:	40 95       	com	r20
     c1c:	54 2f       	mov	r21, r20
     c1e:	bc 01       	movw	r22, r24
     c20:	cd 01       	movw	r24, r26
     c22:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     c26:	da 01       	movw	r26, r20
     c28:	c9 01       	movw	r24, r18
     c2a:	f8 01       	movw	r30, r16
     c2c:	e8 1b       	sub	r30, r24
     c2e:	f9 0b       	sbc	r31, r25
     c30:	cf 01       	movw	r24, r30
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
      rest = ((2 * (long)srd.step_delay)+rest)%(4 * srd.accel_count + 1);
     c36:	80 91 25 04 	lds	r24, 0x0425
     c3a:	90 91 26 04 	lds	r25, 0x0426
     c3e:	cc 01       	movw	r24, r24
     c40:	a0 e0       	ldi	r26, 0x00	; 0
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	9c 01       	movw	r18, r24
     c46:	ad 01       	movw	r20, r26
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	80 91 dc 03 	lds	r24, 0x03DC
     c54:	90 91 dd 03 	lds	r25, 0x03DD
     c58:	cc 01       	movw	r24, r24
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	82 0f       	add	r24, r18
     c60:	93 1f       	adc	r25, r19
     c62:	a4 1f       	adc	r26, r20
     c64:	b5 1f       	adc	r27, r21
     c66:	20 91 2d 04 	lds	r18, 0x042D
     c6a:	30 91 2e 04 	lds	r19, 0x042E
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	44 27       	eor	r20, r20
     c7c:	37 fd       	sbrc	r19, 7
     c7e:	40 95       	com	r20
     c80:	54 2f       	mov	r21, r20
     c82:	bc 01       	movw	r22, r24
     c84:	cd 01       	movw	r24, r26
     c86:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	90 93 dd 03 	sts	0x03DD, r25
     c92:	80 93 dc 03 	sts	0x03DC, r24
      // Check if we at last step
      if(srd.accel_count >= 0){
     c96:	80 91 2d 04 	lds	r24, 0x042D
     c9a:	90 91 2e 04 	lds	r25, 0x042E
     c9e:	99 23       	and	r25, r25
     ca0:	54 f0       	brlt	.+20     	; 0xcb6 <__vector_13+0x3a6>
        srd.run_state = STOP;
     ca2:	80 91 24 04 	lds	r24, 0x0424
     ca6:	88 7f       	andi	r24, 0xF8	; 248
     ca8:	80 93 24 04 	sts	0x0424, r24
      }
      break;
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <__vector_13+0x3a8>
        last_accel_delay = new_step_delay;
        new_step_delay = srd.min_delay;
        rest = 0;
        srd.run_state = RUN;
      }
      break;
     cae:	00 00       	nop
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <__vector_13+0x3a8>
        srd.accel_count = srd.decel_val;
        // Start decelration with same delay as accel ended with.
        new_step_delay = last_accel_delay;
        srd.run_state = DECEL;
      }
      break;
     cb2:	00 00       	nop
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <__vector_13+0x3a8>
      rest = ((2 * (long)srd.step_delay)+rest)%(4 * srd.accel_count + 1);
      // Check if we at last step
      if(srd.accel_count >= 0){
        srd.run_state = STOP;
      }
      break;
     cb6:	00 00       	nop
  }
  srd.step_delay = new_step_delay;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	90 93 26 04 	sts	0x0426, r25
     cc0:	80 93 25 04 	sts	0x0425, r24
}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <sqart>:
 *
 *  \param x  Value to find square root of.
 *  \return  Square root of x.
 */
static unsigned long sqart(unsigned long x)
{
     cf2:	6f 92       	push	r6
     cf4:	7f 92       	push	r7
     cf6:	8f 92       	push	r8
     cf8:	9f 92       	push	r9
     cfa:	af 92       	push	r10
     cfc:	bf 92       	push	r11
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <sqart+0x1e>
     d10:	00 d0       	rcall	.+0      	; 0xd12 <sqart+0x20>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	69 83       	std	Y+1, r22	; 0x01
     d18:	7a 83       	std	Y+2, r23	; 0x02
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	9c 83       	std	Y+4, r25	; 0x04
  register unsigned long xr;  // result register
  register unsigned long q2;  // scan-bit register
  register unsigned char f;   // flag (one bit)

  xr = 0;                     // clear result
     d1e:	ee 24       	eor	r14, r14
     d20:	ff 24       	eor	r15, r15
     d22:	87 01       	movw	r16, r14
  q2 = 0x40000000L;           // higest possible result bit
     d24:	aa 24       	eor	r10, r10
     d26:	bb 24       	eor	r11, r11
     d28:	65 01       	movw	r12, r10
     d2a:	68 94       	set
     d2c:	d6 f8       	bld	r13, 6
  do
  {
    if((xr + q2) <= x)
     d2e:	a8 01       	movw	r20, r16
     d30:	97 01       	movw	r18, r14
     d32:	2a 0d       	add	r18, r10
     d34:	3b 1d       	adc	r19, r11
     d36:	4c 1d       	adc	r20, r12
     d38:	5d 1d       	adc	r21, r13
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	ab 81       	ldd	r26, Y+3	; 0x03
     d40:	bc 81       	ldd	r27, Y+4	; 0x04
     d42:	82 17       	cp	r24, r18
     d44:	93 07       	cpc	r25, r19
     d46:	a4 07       	cpc	r26, r20
     d48:	b5 07       	cpc	r27, r21
     d4a:	c8 f0       	brcs	.+50     	; 0xd7e <sqart+0x8c>
    {
      x -= xr + q2;
     d4c:	d8 01       	movw	r26, r16
     d4e:	c7 01       	movw	r24, r14
     d50:	8a 0d       	add	r24, r10
     d52:	9b 1d       	adc	r25, r11
     d54:	ac 1d       	adc	r26, r12
     d56:	bd 1d       	adc	r27, r13
     d58:	29 81       	ldd	r18, Y+1	; 0x01
     d5a:	3a 81       	ldd	r19, Y+2	; 0x02
     d5c:	4b 81       	ldd	r20, Y+3	; 0x03
     d5e:	5c 81       	ldd	r21, Y+4	; 0x04
     d60:	39 01       	movw	r6, r18
     d62:	4a 01       	movw	r8, r20
     d64:	68 1a       	sub	r6, r24
     d66:	79 0a       	sbc	r7, r25
     d68:	8a 0a       	sbc	r8, r26
     d6a:	9b 0a       	sbc	r9, r27
     d6c:	d4 01       	movw	r26, r8
     d6e:	c3 01       	movw	r24, r6
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	ab 83       	std	Y+3, r26	; 0x03
     d76:	bc 83       	std	Y+4, r27	; 0x04
      f = 1;                  // set flag
     d78:	99 24       	eor	r9, r9
     d7a:	93 94       	inc	r9
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <sqart+0x8e>
    }
    else{
      f = 0;                  // clear flag
     d7e:	99 24       	eor	r9, r9
    }
    xr >>= 1;
     d80:	16 95       	lsr	r17
     d82:	07 95       	ror	r16
     d84:	f7 94       	ror	r15
     d86:	e7 94       	ror	r14
    if(f){
     d88:	99 20       	and	r9, r9
     d8a:	21 f0       	breq	.+8      	; 0xd94 <sqart+0xa2>
      xr += q2;               // test flag
     d8c:	ea 0c       	add	r14, r10
     d8e:	fb 1c       	adc	r15, r11
     d90:	0c 1d       	adc	r16, r12
     d92:	1d 1d       	adc	r17, r13
    }
  } while(q2 >>= 2);          // shift twice
     d94:	d6 94       	lsr	r13
     d96:	c7 94       	ror	r12
     d98:	b7 94       	ror	r11
     d9a:	a7 94       	ror	r10
     d9c:	d6 94       	lsr	r13
     d9e:	c7 94       	ror	r12
     da0:	b7 94       	ror	r11
     da2:	a7 94       	ror	r10
     da4:	a1 14       	cp	r10, r1
     da6:	b1 04       	cpc	r11, r1
     da8:	c1 04       	cpc	r12, r1
     daa:	d1 04       	cpc	r13, r1
     dac:	09 f0       	breq	.+2      	; 0xdb0 <sqart+0xbe>
     dae:	bf cf       	rjmp	.-130    	; 0xd2e <sqart+0x3c>
  if(xr < x){
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	ab 81       	ldd	r26, Y+3	; 0x03
     db6:	bc 81       	ldd	r27, Y+4	; 0x04
     db8:	e8 16       	cp	r14, r24
     dba:	f9 06       	cpc	r15, r25
     dbc:	0a 07       	cpc	r16, r26
     dbe:	1b 07       	cpc	r17, r27
     dc0:	30 f4       	brcc	.+12     	; 0xdce <sqart+0xdc>
    return xr +1;             // add for rounding
     dc2:	d8 01       	movw	r26, r16
     dc4:	c7 01       	movw	r24, r14
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	a1 1d       	adc	r26, r1
     dca:	b1 1d       	adc	r27, r1
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <sqart+0xe0>
  }
  else{
    return xr;
     dce:	d8 01       	movw	r26, r16
     dd0:	c7 01       	movw	r24, r14
  }
}
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	9f 90       	pop	r9
     df4:	8f 90       	pop	r8
     df6:	7f 90       	pop	r7
     df8:	6f 90       	pop	r6
     dfa:	08 95       	ret

00000dfc <min>:
 *  Returns the smallest value.
 *
 *  \return  Min(x,y).
 */
unsigned int min(unsigned int x, unsigned int y)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <min+0x6>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <min+0x8>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	7c 83       	std	Y+4, r23	; 0x04
     e0e:	6b 83       	std	Y+3, r22	; 0x03
  if(x < y){
     e10:	29 81       	ldd	r18, Y+1	; 0x01
     e12:	3a 81       	ldd	r19, Y+2	; 0x02
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	28 17       	cp	r18, r24
     e1a:	39 07       	cpc	r19, r25
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <min+0x28>
    return x;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <min+0x2c>
  }
  else{
    return y;
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
  }
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <USART_Init>:
//! TX buffer tail pointer.
static volatile unsigned char UART_TxTail;


void USART_Init (unsigned int ubrr)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <USART_Init+0x6>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     e44:	85 ec       	ldi	r24, 0xC5	; 197
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	29 81       	ldd	r18, Y+1	; 0x01
     e4a:	3a 81       	ldd	r19, Y+2	; 0x02
     e4c:	23 2f       	mov	r18, r19
     e4e:	33 27       	eor	r19, r19
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)ubrr;
     e54:	84 ec       	ldi	r24, 0xC4	; 196
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	29 81       	ldd	r18, Y+1	; 0x01
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 83       	st	Z, r18
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     e5e:	81 ec       	ldi	r24, 0xC1	; 193
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	28 e1       	ldi	r18, 0x18	; 24
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
	
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01); //set asynchronous, no parity, one stop bit, 8 bit transfer.
     e68:	82 ec       	ldi	r24, 0xC2	; 194
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	26 e0       	ldi	r18, 0x06	; 6
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18
	
	UCSR0B |= (1 << RXCIE0); //set RX interrupt on
     e72:	81 ec       	ldi	r24, 0xC1	; 193
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	21 ec       	ldi	r18, 0xC1	; 193
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	f9 01       	movw	r30, r18
     e7c:	20 81       	ld	r18, Z
     e7e:	20 68       	ori	r18, 0x80	; 128
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
	Received = ' ';
     e84:	80 e2       	ldi	r24, 0x20	; 32
     e86:	80 93 22 04 	sts	0x0422, r24
	Command = 0;
     e8a:	10 92 23 04 	sts	0x0423, r1
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     ea4:	00 00       	nop
     ea6:	80 ec       	ldi	r24, 0xC0	; 192
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	80 72       	andi	r24, 0x20	; 32
     eb4:	90 70       	andi	r25, 0x00	; 0
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	b1 f3       	breq	.-20     	; 0xea6 <USART_Transmit+0xe>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     eba:	86 ec       	ldi	r24, 0xC6	; 198
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	29 81       	ldd	r18, Y+1	; 0x01
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
}
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <USART_Receive>:
unsigned char USART_Receive( void )
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     ed4:	00 00       	nop
     ed6:	80 ec       	ldi	r24, 0xC0	; 192
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	80 81       	ld	r24, Z
     ede:	88 23       	and	r24, r24
     ee0:	d4 f7       	brge	.-12     	; 0xed6 <USART_Receive+0xa>
		;
	/* Get and return received data from buffer */
	return UDR0;
     ee2:	86 ec       	ldi	r24, 0xC6	; 198
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <uart_SendByte>:
void uart_SendByte(unsigned char data)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <uart_SendByte+0x6>
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char tmphead;

  // Calculate buffer index
  tmphead = ( UART_TxHead + 1 ) & UART_TX_BUFFER_MASK;
     efc:	80 91 20 04 	lds	r24, 0x0420
     f00:	8f 5f       	subi	r24, 0xFF	; 255
     f02:	8f 73       	andi	r24, 0x3F	; 63
     f04:	89 83       	std	Y+1, r24	; 0x01
  // Wait for free space in buffer
  while ( tmphead == UART_TxTail )
     f06:	00 00       	nop
     f08:	80 91 21 04 	lds	r24, 0x0421
     f0c:	99 81       	ldd	r25, Y+1	; 0x01
     f0e:	98 17       	cp	r25, r24
     f10:	d9 f3       	breq	.-10     	; 0xf08 <uart_SendByte+0x18>
    ;
  // Store data in buffer
  UART_TxBuffer[tmphead] = data;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	80 52       	subi	r24, 0x20	; 32
     f1a:	9c 4f       	sbci	r25, 0xFC	; 252
     f1c:	2a 81       	ldd	r18, Y+2	; 0x02
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
  // Store new index
  UART_TxHead = tmphead;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 93 20 04 	sts	0x0420, r24
  // Enable UDRE interrupt
  SET_UDRIE;
     f28:	81 ec       	ldi	r24, 0xC1	; 193
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	21 ec       	ldi	r18, 0xC1	; 193
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	f9 01       	movw	r30, r18
     f32:	20 81       	ld	r18, Z
     f34:	20 62       	ori	r18, 0x20	; 32
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <uart_SendString>:
 *  If TX buffer is full it will hang until space.
 *
 *  \param Str  String to be sent.
 */
void uart_SendString(char Str[])
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <uart_SendString+0x6>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9b 83       	std	Y+3, r25	; 0x03
     f52:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char n = 0;
     f54:	19 82       	std	Y+1, r1	; 0x01
  while(Str[n])
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <uart_SendString+0x30>
    uart_SendByte(Str[n++]);
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	2a 81       	ldd	r18, Y+2	; 0x02
     f60:	3b 81       	ldd	r19, Y+3	; 0x03
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	fc 01       	movw	r30, r24
     f68:	80 81       	ld	r24, Z
     f6a:	99 81       	ldd	r25, Y+1	; 0x01
     f6c:	9f 5f       	subi	r25, 0xFF	; 255
     f6e:	99 83       	std	Y+1, r25	; 0x01
     f70:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
 *  \param Str  String to be sent.
 */
void uart_SendString(char Str[])
{
  unsigned char n = 0;
  while(Str[n])
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	2a 81       	ldd	r18, Y+2	; 0x02
     f7c:	3b 81       	ldd	r19, Y+3	; 0x03
     f7e:	82 0f       	add	r24, r18
     f80:	93 1f       	adc	r25, r19
     f82:	fc 01       	movw	r30, r24
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	39 f7       	brne	.-50     	; 0xf58 <uart_SendString+0x14>
    uart_SendByte(Str[n++]);
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <uart_SendInt>:
 *  If TX buffer is full it will hang until space.
 *
 *  \param x  Integer to be sent.
 */
void uart_SendInt(int x)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <uart_SendInt+0x6>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <uart_SendInt+0x8>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
  static const char dec[] = "0123456789";
  unsigned int div_val = 10000;
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	97 e2       	ldi	r25, 0x27	; 39
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01

  if (x < 0)
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	99 23       	and	r25, r25
     fb4:	ac f4       	brge	.+42     	; 0xfe0 <uart_SendInt+0x4a>
  {
    x = - x;
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	90 95       	com	r25
     fbc:	81 95       	neg	r24
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
    uart_SendByte('-');
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
  }
  
  while (div_val > 1 && div_val > x)
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <uart_SendInt+0x4a>
    div_val /= 10;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	2a e0       	ldi	r18, 0x0A	; 10
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	b9 01       	movw	r22, r18
     fd6:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodhi4>
     fda:	9b 01       	movw	r18, r22
     fdc:	3a 83       	std	Y+2, r19	; 0x02
     fde:	29 83       	std	Y+1, r18	; 0x01
  {
    x = - x;
    uart_SendByte('-');
  }
  
  while (div_val > 1 && div_val > x)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	91 05       	cpc	r25, r1
     fe8:	38 f0       	brcs	.+14     	; 0xff8 <uart_SendInt+0x62>
     fea:	2b 81       	ldd	r18, Y+3	; 0x03
     fec:	3c 81       	ldd	r19, Y+4	; 0x04
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	50 f3       	brcs	.-44     	; 0xfcc <uart_SendInt+0x36>
    div_val /= 10;
	
  do
  {
    uart_SendByte (dec[x / div_val]);
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	29 81       	ldd	r18, Y+1	; 0x01
     ffe:	3a 81       	ldd	r19, Y+2	; 0x02
    1000:	b9 01       	movw	r22, r18
    1002:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodhi4>
    1006:	9b 01       	movw	r18, r22
    1008:	c9 01       	movw	r24, r18
    100a:	86 53       	subi	r24, 0x36	; 54
    100c:	9c 4f       	sbci	r25, 0xFC	; 252
    100e:	fc 01       	movw	r30, r24
    1010:	80 81       	ld	r24, Z
    1012:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
    x %= div_val;
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	29 81       	ldd	r18, Y+1	; 0x01
    101c:	3a 81       	ldd	r19, Y+2	; 0x02
    101e:	b9 01       	movw	r22, r18
    1020:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodhi4>
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    div_val /= 10;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	2a e0       	ldi	r18, 0x0A	; 10
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	b9 01       	movw	r22, r18
    1032:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodhi4>
    1036:	9b 01       	movw	r18, r22
    1038:	3a 83       	std	Y+2, r19	; 0x02
    103a:	29 83       	std	Y+1, r18	; 0x01
  }
  while(div_val);
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	d1 f6       	brne	.-76     	; 0xff8 <uart_SendInt+0x62>
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <uart_FlushRxBuffer>:
 *  Empties the uart RX buffer.
 *
 *  \return x  Integer to be sent.
 */
void uart_FlushRxBuffer(void)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	UART_RxPtr = 0;
    105a:	10 92 2f 04 	sts	0x042F, r1
	UART_RxBuffer[UART_RxPtr] = 0;
    105e:	80 91 2f 04 	lds	r24, 0x042F
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	80 5d       	subi	r24, 0xD0	; 208
    1068:	9b 4f       	sbci	r25, 0xFB	; 251
    106a:	fc 01       	movw	r30, r24
    106c:	10 82       	st	Z, r1
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <__vector_20>:
ISR(USART0_RX_vect) //trigger interrupt when uart1 receives data   USART0_RX_vect
{ 
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	0f 92       	push	r0
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

  // Read the received data.
  data = UDR0;
    10a0:	86 ec       	ldi	r24, 0xC6	; 198
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	89 83       	std	Y+1, r24	; 0x01

  if(status.running == FALSE){
    10aa:	80 91 d6 03 	lds	r24, 0x03D6
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	88 23       	and	r24, r24
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <__vector_20+0x42>
    10b4:	54 c0       	rjmp	.+168    	; 0x115e <__stack+0x5f>
    // If backspace.
    if(data == '\b')
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	88 30       	cpi	r24, 0x08	; 8
    10ba:	e1 f4       	brne	.+56     	; 0x10f4 <__vector_20+0x80>
    {
      if(UART_RxPtr)
    10bc:	80 91 2f 04 	lds	r24, 0x042F
    10c0:	88 23       	and	r24, r24
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <__vector_20+0x52>
    10c4:	4c c0       	rjmp	.+152    	; 0x115e <__stack+0x5f>
      // Done if not at beginning of buffer.
      {
        uart_SendByte('\b');
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
        uart_SendByte(' ');
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
        uart_SendByte('\b');
    10d2:	88 e0       	ldi	r24, 0x08	; 8
    10d4:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
        UART_RxPtr--;
    10d8:	80 91 2f 04 	lds	r24, 0x042F
    10dc:	81 50       	subi	r24, 0x01	; 1
    10de:	80 93 2f 04 	sts	0x042F, r24
        UART_RxBuffer[UART_RxPtr]=0x00;
    10e2:	80 91 2f 04 	lds	r24, 0x042F
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	80 5d       	subi	r24, 0xD0	; 208
    10ec:	9b 4f       	sbci	r25, 0xFB	; 251
    10ee:	fc 01       	movw	r30, r24
    10f0:	10 82       	st	Z, r1
    10f2:	35 c0       	rjmp	.+106    	; 0x115e <__stack+0x5f>
    else
    {
      // Put the data into RxBuf
      // and place 0x00 after it. If buffer is full,
      // data is written to UART_RX_BUFFER_SIZE - 1.
      if(UART_RxPtr < (UART_RX_BUFFER_SIZE - 1)){
    10f4:	80 91 2f 04 	lds	r24, 0x042F
    10f8:	8f 31       	cpi	r24, 0x1F	; 31
    10fa:	c0 f4       	brcc	.+48     	; 0x112c <__stack+0x2d>
        UART_RxBuffer[UART_RxPtr] = data;
    10fc:	80 91 2f 04 	lds	r24, 0x042F
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	80 5d       	subi	r24, 0xD0	; 208
    1106:	9b 4f       	sbci	r25, 0xFB	; 251
    1108:	29 81       	ldd	r18, Y+1	; 0x01
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
        UART_RxBuffer[UART_RxPtr + 1]=0x00;
    110e:	80 91 2f 04 	lds	r24, 0x042F
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	80 5d       	subi	r24, 0xD0	; 208
    111a:	9b 4f       	sbci	r25, 0xFB	; 251
    111c:	fc 01       	movw	r30, r24
    111e:	10 82       	st	Z, r1
        UART_RxPtr++;
    1120:	80 91 2f 04 	lds	r24, 0x042F
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 2f 04 	sts	0x042F, r24
    112a:	0d c0       	rjmp	.+26     	; 0x1146 <__stack+0x47>
      }
      else
      {
        UART_RxBuffer[UART_RxPtr - 1] = data;
    112c:	80 91 2f 04 	lds	r24, 0x042F
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	80 5d       	subi	r24, 0xD0	; 208
    1138:	9b 4f       	sbci	r25, 0xFB	; 251
    113a:	29 81       	ldd	r18, Y+1	; 0x01
    113c:	fc 01       	movw	r30, r24
    113e:	20 83       	st	Z, r18
        uart_SendByte('\b');
    1140:	88 e0       	ldi	r24, 0x08	; 8
    1142:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
      }
      // If enter.
      if(data == 13){
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	8d 30       	cpi	r24, 0x0D	; 13
    114a:	31 f4       	brne	.+12     	; 0x1158 <__stack+0x59>
        status.cmd = TRUE;
    114c:	80 91 d6 03 	lds	r24, 0x03D6
    1150:	82 60       	ori	r24, 0x02	; 2
    1152:	80 93 d6 03 	sts	0x03D6, r24
    1156:	03 c0       	rjmp	.+6      	; 0x115e <__stack+0x5f>
      }
      else
        uart_SendByte(data);
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_SendByte>
    }
  }
}
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_22>:

ISR(USART0_TX_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
   unsigned char UART_TxTail_tmp;
   UART_TxTail_tmp = UART_TxTail;
    11a6:	80 91 21 04 	lds	r24, 0x0421
    11aa:	89 83       	std	Y+1, r24	; 0x01

  // Check if all data is transmitted
  if ( UART_TxHead !=  UART_TxTail_tmp )
    11ac:	90 91 20 04 	lds	r25, 0x0420
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	98 17       	cp	r25, r24
    11b4:	a1 f0       	breq	.+40     	; 0x11de <__vector_22+0x58>
  {
    // Calculate buffer index
    UART_TxTail_tmp = ( UART_TxTail + 1 ) & UART_TX_BUFFER_MASK;
    11b6:	80 91 21 04 	lds	r24, 0x0421
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	8f 73       	andi	r24, 0x3F	; 63
    11be:	89 83       	std	Y+1, r24	; 0x01
    // Store new index
    UART_TxTail =  UART_TxTail_tmp;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	80 93 21 04 	sts	0x0421, r24
    // Start transmition
    UDR0= UART_TxBuffer[ UART_TxTail_tmp];
    11c6:	86 ec       	ldi	r24, 0xC6	; 198
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	29 81       	ldd	r18, Y+1	; 0x01
    11cc:	22 2f       	mov	r18, r18
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	20 52       	subi	r18, 0x20	; 32
    11d2:	3c 4f       	sbci	r19, 0xFC	; 252
    11d4:	f9 01       	movw	r30, r18
    11d6:	20 81       	ld	r18, Z
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
    11dc:	09 c0       	rjmp	.+18     	; 0x11f0 <__vector_22+0x6a>
  }
  else
    // Disable UD
	CLR_UDRIE;
    11de:	81 ec       	ldi	r24, 0xC1	; 193
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	21 ec       	ldi	r18, 0xC1	; 193
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	f9 01       	movw	r30, r18
    11e8:	20 81       	ld	r18, Z
    11ea:	2f 7d       	andi	r18, 0xDF	; 223
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
}
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	0f 90       	pop	r0
    1208:	1f 90       	pop	r1
    120a:	18 95       	reti

0000120c <__mulsi3>:
    120c:	62 9f       	mul	r22, r18
    120e:	d0 01       	movw	r26, r0
    1210:	73 9f       	mul	r23, r19
    1212:	f0 01       	movw	r30, r0
    1214:	82 9f       	mul	r24, r18
    1216:	e0 0d       	add	r30, r0
    1218:	f1 1d       	adc	r31, r1
    121a:	64 9f       	mul	r22, r20
    121c:	e0 0d       	add	r30, r0
    121e:	f1 1d       	adc	r31, r1
    1220:	92 9f       	mul	r25, r18
    1222:	f0 0d       	add	r31, r0
    1224:	83 9f       	mul	r24, r19
    1226:	f0 0d       	add	r31, r0
    1228:	74 9f       	mul	r23, r20
    122a:	f0 0d       	add	r31, r0
    122c:	65 9f       	mul	r22, r21
    122e:	f0 0d       	add	r31, r0
    1230:	99 27       	eor	r25, r25
    1232:	72 9f       	mul	r23, r18
    1234:	b0 0d       	add	r27, r0
    1236:	e1 1d       	adc	r30, r1
    1238:	f9 1f       	adc	r31, r25
    123a:	63 9f       	mul	r22, r19
    123c:	b0 0d       	add	r27, r0
    123e:	e1 1d       	adc	r30, r1
    1240:	f9 1f       	adc	r31, r25
    1242:	bd 01       	movw	r22, r26
    1244:	cf 01       	movw	r24, r30
    1246:	11 24       	eor	r1, r1
    1248:	08 95       	ret

0000124a <__udivmodhi4>:
    124a:	aa 1b       	sub	r26, r26
    124c:	bb 1b       	sub	r27, r27
    124e:	51 e1       	ldi	r21, 0x11	; 17
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <__udivmodhi4_ep>

00001252 <__udivmodhi4_loop>:
    1252:	aa 1f       	adc	r26, r26
    1254:	bb 1f       	adc	r27, r27
    1256:	a6 17       	cp	r26, r22
    1258:	b7 07       	cpc	r27, r23
    125a:	10 f0       	brcs	.+4      	; 0x1260 <__udivmodhi4_ep>
    125c:	a6 1b       	sub	r26, r22
    125e:	b7 0b       	sbc	r27, r23

00001260 <__udivmodhi4_ep>:
    1260:	88 1f       	adc	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	5a 95       	dec	r21
    1266:	a9 f7       	brne	.-22     	; 0x1252 <__udivmodhi4_loop>
    1268:	80 95       	com	r24
    126a:	90 95       	com	r25
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	08 95       	ret

00001272 <__udivmodsi4>:
    1272:	a1 e2       	ldi	r26, 0x21	; 33
    1274:	1a 2e       	mov	r1, r26
    1276:	aa 1b       	sub	r26, r26
    1278:	bb 1b       	sub	r27, r27
    127a:	fd 01       	movw	r30, r26
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <__udivmodsi4_ep>

0000127e <__udivmodsi4_loop>:
    127e:	aa 1f       	adc	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	ee 1f       	adc	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	a2 17       	cp	r26, r18
    1288:	b3 07       	cpc	r27, r19
    128a:	e4 07       	cpc	r30, r20
    128c:	f5 07       	cpc	r31, r21
    128e:	20 f0       	brcs	.+8      	; 0x1298 <__udivmodsi4_ep>
    1290:	a2 1b       	sub	r26, r18
    1292:	b3 0b       	sbc	r27, r19
    1294:	e4 0b       	sbc	r30, r20
    1296:	f5 0b       	sbc	r31, r21

00001298 <__udivmodsi4_ep>:
    1298:	66 1f       	adc	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	88 1f       	adc	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	1a 94       	dec	r1
    12a2:	69 f7       	brne	.-38     	; 0x127e <__udivmodsi4_loop>
    12a4:	60 95       	com	r22
    12a6:	70 95       	com	r23
    12a8:	80 95       	com	r24
    12aa:	90 95       	com	r25
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	bd 01       	movw	r22, r26
    12b2:	cf 01       	movw	r24, r30
    12b4:	08 95       	ret

000012b6 <__divmodsi4>:
    12b6:	97 fb       	bst	r25, 7
    12b8:	09 2e       	mov	r0, r25
    12ba:	05 26       	eor	r0, r21
    12bc:	0e d0       	rcall	.+28     	; 0x12da <__divmodsi4_neg1>
    12be:	57 fd       	sbrc	r21, 7
    12c0:	04 d0       	rcall	.+8      	; 0x12ca <__divmodsi4_neg2>
    12c2:	d7 df       	rcall	.-82     	; 0x1272 <__udivmodsi4>
    12c4:	0a d0       	rcall	.+20     	; 0x12da <__divmodsi4_neg1>
    12c6:	00 1c       	adc	r0, r0
    12c8:	38 f4       	brcc	.+14     	; 0x12d8 <__divmodsi4_exit>

000012ca <__divmodsi4_neg2>:
    12ca:	50 95       	com	r21
    12cc:	40 95       	com	r20
    12ce:	30 95       	com	r19
    12d0:	21 95       	neg	r18
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	4f 4f       	sbci	r20, 0xFF	; 255
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255

000012d8 <__divmodsi4_exit>:
    12d8:	08 95       	ret

000012da <__divmodsi4_neg1>:
    12da:	f6 f7       	brtc	.-4      	; 0x12d8 <__divmodsi4_exit>
    12dc:	90 95       	com	r25
    12de:	80 95       	com	r24
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	08 95       	ret

000012ec <atoi>:
    12ec:	fc 01       	movw	r30, r24
    12ee:	88 27       	eor	r24, r24
    12f0:	99 27       	eor	r25, r25
    12f2:	e8 94       	clt
    12f4:	21 91       	ld	r18, Z+
    12f6:	20 32       	cpi	r18, 0x20	; 32
    12f8:	e9 f3       	breq	.-6      	; 0x12f4 <atoi+0x8>
    12fa:	29 30       	cpi	r18, 0x09	; 9
    12fc:	10 f0       	brcs	.+4      	; 0x1302 <atoi+0x16>
    12fe:	2e 30       	cpi	r18, 0x0E	; 14
    1300:	c8 f3       	brcs	.-14     	; 0x12f4 <atoi+0x8>
    1302:	2b 32       	cpi	r18, 0x2B	; 43
    1304:	41 f0       	breq	.+16     	; 0x1316 <atoi+0x2a>
    1306:	2d 32       	cpi	r18, 0x2D	; 45
    1308:	39 f4       	brne	.+14     	; 0x1318 <atoi+0x2c>
    130a:	68 94       	set
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <atoi+0x2a>
    130e:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulhi_const_10>
    1312:	82 0f       	add	r24, r18
    1314:	91 1d       	adc	r25, r1
    1316:	21 91       	ld	r18, Z+
    1318:	20 53       	subi	r18, 0x30	; 48
    131a:	2a 30       	cpi	r18, 0x0A	; 10
    131c:	c0 f3       	brcs	.-16     	; 0x130e <atoi+0x22>
    131e:	1e f4       	brtc	.+6      	; 0x1326 <atoi+0x3a>
    1320:	90 95       	com	r25
    1322:	81 95       	neg	r24
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	08 95       	ret

00001328 <__mulhi_const_10>:
    1328:	7a e0       	ldi	r23, 0x0A	; 10
    132a:	97 9f       	mul	r25, r23
    132c:	90 2d       	mov	r25, r0
    132e:	87 9f       	mul	r24, r23
    1330:	80 2d       	mov	r24, r0
    1332:	91 0d       	add	r25, r1
    1334:	11 24       	eor	r1, r1
    1336:	08 95       	ret

00001338 <_exit>:
    1338:	f8 94       	cli

0000133a <__stop_program>:
    133a:	ff cf       	rjmp	.-2      	; 0x133a <__stop_program>
